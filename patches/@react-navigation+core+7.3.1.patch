diff --git a/node_modules/@react-navigation/core/lib/commonjs/deepFreeze.js b/node_modules/@react-navigation/core/lib/commonjs/deepFreeze.js
index 50c7608..7c69874 100644
--- a/node_modules/@react-navigation/core/lib/commonjs/deepFreeze.js
+++ b/node_modules/@react-navigation/core/lib/commonjs/deepFreeze.js
@@ -3,35 +3,6 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.isPlainObject = exports.deepFreeze = void 0;
-const isPlainObject = value => {
-  if (typeof value === 'object' && value !== null) {
-    return Object.getPrototypeOf(value) === Object.prototype;
-  }
-  return false;
-};
-exports.isPlainObject = isPlainObject;
-const deepFreeze = object => {
-  // We only freeze in development to catch issues early
-  // Don't freeze in production to avoid unnecessary performance overhead
-  if (process.env.NODE_ENV === 'production') {
-    return object;
-  }
-  if (Object.isFrozen(object)) {
-    return object;
-  }
-  if (!isPlainObject(object) && !Array.isArray(object)) {
-    return object;
-  }
-
-  // Freeze properties before freezing self
-  for (const key in object) {
-    if (Object.getOwnPropertyDescriptor(object, key)?.configurable) {
-      const value = object[key];
-      deepFreeze(value);
-    }
-  }
-  return Object.freeze(object);
-};
+const deepFreeze = object => object;
 exports.deepFreeze = deepFreeze;
 //# sourceMappingURL=deepFreeze.js.map
diff --git a/node_modules/@react-navigation/core/lib/module/deepFreeze.js b/node_modules/@react-navigation/core/lib/module/deepFreeze.js
index eef4d49..2442609 100644
--- a/node_modules/@react-navigation/core/lib/module/deepFreeze.js
+++ b/node_modules/@react-navigation/core/lib/module/deepFreeze.js
@@ -1,31 +1,4 @@
 "use strict";
 
-export const isPlainObject = value => {
-  if (typeof value === 'object' && value !== null) {
-    return Object.getPrototypeOf(value) === Object.prototype;
-  }
-  return false;
-};
-export const deepFreeze = object => {
-  // We only freeze in development to catch issues early
-  // Don't freeze in production to avoid unnecessary performance overhead
-  if (process.env.NODE_ENV === 'production') {
-    return object;
-  }
-  if (Object.isFrozen(object)) {
-    return object;
-  }
-  if (!isPlainObject(object) && !Array.isArray(object)) {
-    return object;
-  }
-
-  // Freeze properties before freezing self
-  for (const key in object) {
-    if (Object.getOwnPropertyDescriptor(object, key)?.configurable) {
-      const value = object[key];
-      deepFreeze(value);
-    }
-  }
-  return Object.freeze(object);
-};
+export const deepFreeze = object => object;
 //# sourceMappingURL=deepFreeze.js.map
diff --git a/node_modules/@react-navigation/core/src/deepFreeze.tsx b/node_modules/@react-navigation/core/src/deepFreeze.tsx
index 0e57a1b..175f0a8 100644
--- a/node_modules/@react-navigation/core/src/deepFreeze.tsx
+++ b/node_modules/@react-navigation/core/src/deepFreeze.tsx
@@ -1,34 +1 @@
-export const isPlainObject = (value: unknown): value is object => {
-  if (typeof value === 'object' && value !== null) {
-    return Object.getPrototypeOf(value) === Object.prototype;
-  }
-
-  return false;
-};
-
-export const deepFreeze = <T,>(object: T): Readonly<T> => {
-  // We only freeze in development to catch issues early
-  // Don't freeze in production to avoid unnecessary performance overhead
-  if (process.env.NODE_ENV === 'production') {
-    return object;
-  }
-
-  if (Object.isFrozen(object)) {
-    return object;
-  }
-
-  if (!isPlainObject(object) && !Array.isArray(object)) {
-    return object;
-  }
-
-  // Freeze properties before freezing self
-  for (const key in object) {
-    if (Object.getOwnPropertyDescriptor(object, key)?.configurable) {
-      const value = object[key];
-
-      deepFreeze(value);
-    }
-  }
-
-  return Object.freeze(object);
-};
+export const deepFreeze = <T,>(object: T): T => object;

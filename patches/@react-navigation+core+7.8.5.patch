diff --git a/node_modules/@react-navigation/core/lib/module/.deepFreeze.js.swp b/node_modules/@react-navigation/core/lib/module/.deepFreeze.js.swp
new file mode 100644
index 0000000..ce239a3
Binary files /dev/null and b/node_modules/@react-navigation/core/lib/module/.deepFreeze.js.swp differ
diff --git a/node_modules/@react-navigation/core/lib/module/deepFreeze.js b/node_modules/@react-navigation/core/lib/module/deepFreeze.js
index f5afb5c..2442609 100644
--- a/node_modules/@react-navigation/core/lib/module/deepFreeze.js
+++ b/node_modules/@react-navigation/core/lib/module/deepFreeze.js
@@ -1,34 +1,4 @@
 "use strict";
 
-export const isPlainObject = value => {
-  if (typeof value === 'object' && value !== null) {
-    return Object.getPrototypeOf(value) === Object.prototype;
-  }
-  return false;
-};
-export const deepFreeze = object => {
-  // We only freeze in development to catch issues early
-  // Don't freeze in production to avoid unnecessary performance overhead
-  if (process.env.NODE_ENV === 'production') {
-    return object;
-  }
-  if (Object.isFrozen(object)) {
-    return object;
-  }
-  if (!isPlainObject(object) && !Array.isArray(object)) {
-    return object;
-  }
-
-  // Freeze properties before freezing self
-  for (const key in object) {
-    // Don't freeze objects in params since they are passed by the user
-    if (key !== 'params') {
-      if (Object.getOwnPropertyDescriptor(object, key)?.configurable) {
-        const value = object[key];
-        deepFreeze(value);
-      }
-    }
-  }
-  return Object.freeze(object);
-};
+export const deepFreeze = object => object;
 //# sourceMappingURL=deepFreeze.js.map
diff --git a/node_modules/@react-navigation/core/src/.deepFreeze.tsx.swp b/node_modules/@react-navigation/core/src/.deepFreeze.tsx.swp
new file mode 100644
index 0000000..9045a7d
Binary files /dev/null and b/node_modules/@react-navigation/core/src/.deepFreeze.tsx.swp differ
diff --git a/node_modules/@react-navigation/core/src/deepFreeze.tsx b/node_modules/@react-navigation/core/src/deepFreeze.tsx
index a7e5468..89ea337 100644
--- a/node_modules/@react-navigation/core/src/deepFreeze.tsx
+++ b/node_modules/@react-navigation/core/src/deepFreeze.tsx
@@ -6,32 +6,4 @@ export const isPlainObject = (value: unknown): value is object => {
   return false;
 };
 
-export const deepFreeze = <T,>(object: T): Readonly<T> => {
-  // We only freeze in development to catch issues early
-  // Don't freeze in production to avoid unnecessary performance overhead
-  if (process.env.NODE_ENV === 'production') {
-    return object;
-  }
-
-  if (Object.isFrozen(object)) {
-    return object;
-  }
-
-  if (!isPlainObject(object) && !Array.isArray(object)) {
-    return object;
-  }
-
-  // Freeze properties before freezing self
-  for (const key in object) {
-    // Don't freeze objects in params since they are passed by the user
-    if (key !== 'params') {
-      if (Object.getOwnPropertyDescriptor(object, key)?.configurable) {
-        const value = object[key];
-
-        deepFreeze(value);
-      }
-    }
-  }
-
-  return Object.freeze(object);
-};
+export const deepFreeze = <T,>(object: T): Readonly<T> => object;
